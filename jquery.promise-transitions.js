// Generated by CoffeeScript 1.7.1
(function() {
  (function($) {
    var changeClassTransitional, defaults;
    defaults = {
      notifyCount: 0
    };
    changeClassTransitional = function(el, cl, kind, options) {
      var count, dfd, duration, interval, intervalId, settings;
      settings = $.extend({}, defaults, options);
      el[kind + "Class"](cl);
      dfd = $.Deferred();
      duration = el.css("transition-duration").split(", ");
      if (duration.length > 1 || !duration[0]) {
        dfd.resolveWith(el, [false]);
        return dfd.promise();
      }
      duration = parseInt(1000 * parseFloat(duration[0].slice(0, -1), 10), 10);
      if (settings.notifyCount) {
        count = 0;
        interval = duration / settings.notifyCount;
        intervalId = setInterval(function() {
          var elapsed, percent;
          count += 1;
          percent = count / settings.notifyCount;
          elapsed = count * interval;
          return dfd.notifyWith(el, [elapsed, percent]);
        }, interval);
      }
      return el.on("transitionend", function(teEvent) {
        var e, prop;
        prop = teEvent.originalEvent.propertyName;
        e = $.Event("jqetTransitionEnd", {
          propertyName: prop,
          originalEvent: teEvent.originalEvent
        });
        el.trigger(e);
        dfd.resolveWith(el, [e]);
        return el.off("transitionend");
      });
    };
    return dfd.promise();
    return $.fn.extend({
      addClassTransitional: function(cl, options) {
        options || (options = {});
        return changeClassTransitional(this, cl, "add", options);
      },
      removeClassTransitional: function(cl, options) {
        options || (options = {});
        return changeClassTransitional(this, cl, "remove", options);
      },
      toggleClassTransitional: function(cl, options) {
        options || (options = {});
        return changeClassTransitional(this, cl, "toggle", options2);
      }
    });
  })(jQuery);

}).call(this);
